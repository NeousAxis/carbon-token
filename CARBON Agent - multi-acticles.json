{
  "name": "CARBON Agent - multi-acticles",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 6
            }
          ]
        }
      },
      "name": "Every 6 Hours",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [
        0,
        0
      ],
      "id": "5e42fd94-a7b3-47ce-a4a0-88295271d18a"
    },
    {
      "parameters": {
        "url": "https://www.euronews.com/rss?level=vertical&name=green",
        "options": {}
      },
      "name": "Fetch Euronews Green RSS",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        224,
        -96
      ],
      "id": "79b5630a-6e0b-4e02-b28f-eb1a75f0a019"
    },
    {
      "parameters": {
        "jsCode": "// ==================================================\n// ‚öôÔ∏è CONFIG (copier-coller pr√™t √† l'emploi)\n// ==================================================\nconst OPENROUTER_KEY = process.env.OPENROUTER_KEY;\nconst SUPABASE_URL = 'https://drmlsquvwybixocjwdud.supabase.co';\nconst SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRybWxzcXV2d3liaXhvY2p3ZHVkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAzMDU0NzUsImV4cCI6MjA3NTg4MTQ3NX0.rimLZpAQEyVy8ci1j76HbgagFdtQJefKhZFkr20mlrE';\n\nif (!OPENROUTER_KEY) {\n  throw new Error('OPENROUTER_KEY is missing. Please set it in .env');\n}\n\n// Limite de s√©curit√© pour √©viter les surco√ªts d'IA (mets 999 si tu veux tout traiter)\nconst MAX_ITEMS = 20;     // ‚Üê ajuste si besoin\nconst SLEEP_MS  = 400;    // petite pause entre appels IA pour √©viter le throttling\n\nconst SYSTEM_PROMPT = `Tu es l'Agent CARBON. Analyse l'article complet et d√©cide.\nR√©ponds UNIQUEMENT : {\"decision\":\"BURN\"|\"MINT\"|\"NEUTRAL\",\"amount_crbn\":100000,\"final_score\":5.5,\"confidence\":7,\"justification\":\"...\"}`;\n\n\n// ==================================================\n// üß© PARSE RSS\n// ==================================================\nfunction parseRSS(xmlString) {\n  const articles = [];\n  const itemRegex = /<item>([\\s\\S]*?)<\\/item>/g;\n  let match;\n  while ((match = itemRegex.exec(xmlString)) !== null) {\n    const itemXml = match[1];\n    const titleMatch = /<title><!\\[CDATA\\[(.*?)\\]><\\/title>|<title>(.*?)<\\/title>/s.exec(itemXml);\n    const title = titleMatch ? (titleMatch[1] || titleMatch[2] || '').trim() : '';\n    const linkMatch = /<link>(.*?)<\\/link>/s.exec(itemXml);\n    const link = linkMatch ? linkMatch[1].trim() : '';\n    const descMatch = /<description><!\\[CDATA\\[(.*?)\\]><\\/description>|<description>(.*?)<\\/description>/s.exec(itemXml);\n    const description = descMatch ? (descMatch[1] || descMatch[2] || '').trim() : '';\n    if (title && link) articles.push({ title, link, description });\n  }\n  return articles;\n}\n\nfunction sleep(ms){ return new Promise(r => setTimeout(r, ms)); }\n\n\n// ==================================================\n// üöÄ MAIN\n// ==================================================\nconst http = this.helpers.httpRequest;\nconst allInputs = $input.all();\nlet allArticles = [];\n\n// 1) Collecter tous les articles de tous les inputs\nfor (const inputData of allInputs) {\n  const rssXml = typeof inputData.json?.data === 'string'\n    ? inputData.json.data\n    : (typeof inputData.json === 'string' ? inputData.json : '');\n  if (!rssXml) continue;\n\n  const articles = parseRSS(rssXml);\n  const source = rssXml.includes('name=green') ? 'Euronews Green' : 'Euronews';\n  for (const a of articles) allArticles.push({ ...a, source });\n}\n\n// 2) D√©dupliquer par URL (au cas o√π deux flux contiennent le m√™me lien)\nconst seen = new Set();\nallArticles = allArticles.filter(a => {\n  if (seen.has(a.link)) return false;\n  seen.add(a.link);\n  return true;\n});\n\n// 3) Limiter si besoin\nif (allArticles.length > MAX_ITEMS) {\n  allArticles = allArticles.slice(0, MAX_ITEMS);\n}\n\nif (allArticles.length === 0) {\n  return [{ json: { info: 'No articles found' } }];\n}\n\nconsole.log(`üß™ ${allArticles.length} article(s) √† traiter`);\n\n// 4) Traiter chaque article\nconst results = [];\n\nfor (const { title, link, description, source } of allArticles) {\n  try {\n    // --- Check existence Supabase ---\n    const existing = await http.call(this, {\n      method: 'GET',\n      url: `${SUPABASE_URL}/rest/v1/carbon_events`,\n      headers: {\n        apikey: SUPABASE_ANON_KEY,\n        Authorization: `Bearer ${SUPABASE_ANON_KEY}`,\n        Accept: 'application/json',\n      },\n      qs: { event_url: `eq.${link}`, select: 'id' },\n      json: true,\n    });\n\n    if (Array.isArray(existing) && existing.length > 0) {\n      results.push({ json: { skipped: true, reason: 'already processed', url: link, title } });\n      continue;\n    }\n\n    // --- Appel IA ---\n    const aiData = await http.call(this, {\n      method: 'POST',\n      url: 'https://openrouter.ai/api/v1/chat/completions',\n      headers: {\n        Authorization: `Bearer ${OPENROUTER_KEY}`,\n        'Content-Type': 'application/json',\n      },\n      body: {\n        model: 'openai/gpt-3.5-turbo',\n        temperature: 0.3,\n        max_tokens: 2000,\n        messages: [\n          { role: 'system', content: SYSTEM_PROMPT },\n          { role: 'user', content: `Titre: ${title}\\nURL: ${link}\\nSource: ${source}\\nDescription: ${description}\\n\\nAnalyse.` }\n        ],\n      },\n      json: true,\n    });\n\n    const aiText = aiData?.choices?.[0]?.message?.content ?? '';\n    const cleaned = aiText.replace(/```json\\n?/g, '').replace(/```/g, '').trim();\n\n    let analysis;\n    try {\n      analysis = JSON.parse(cleaned);\n    } catch (e) {\n      results.push({ json: { error: 'AI JSON parse failed', url: link, title, raw: aiText } });\n      // petite pause quand m√™me avant de passer au suivant\n      await sleep(SLEEP_MS);\n      continue;\n    }\n\n    if (!analysis?.decision) {\n      results.push({ json: { error: 'AI decision missing', url: link, title, raw: cleaned } });\n      await sleep(SLEEP_MS);\n      continue;\n    }\n\n    // --- Sauvegarde Supabase ---\n    const txHash = `${analysis.decision}_${Date.now()}_${Math.random().toString(36).slice(2, 10)}`;\n    const eventData = {\n      event_title: title,\n      event_url: link,\n      event_source: source,\n      decision: analysis.decision,\n      amount_crbn: parseInt(analysis.amount_crbn) || 0,\n      final_score: parseFloat(analysis.final_score) || 0,\n      confidence: parseInt(analysis.confidence) || 5,\n      justification: analysis.justification || '',\n      tx_hash: txHash,\n      created_at: new Date().toISOString(),\n    };\n\n    const saved = await http.call(this, {\n      method: 'POST',\n      url: `${SUPABASE_URL}/rest/v1/carbon_events`,\n      headers: {\n        apikey: SUPABASE_ANON_KEY,\n        Authorization: `Bearer ${SUPABASE_ANON_KEY}`,\n        'Content-Type': 'application/json',\n        Prefer: 'return=representation',\n      },\n      body: eventData,\n      json: true,\n    });\n\n    results.push({ json: { success: true, url: link, title, data: saved } });\n\n    // Pause anti-throttle\n    await sleep(SLEEP_MS);\n\n  } catch (e) {\n    results.push({ json: { error: e.message, url: link, title } });\n    // on continue avec l'article suivant\n    await sleep(SLEEP_MS);\n  }\n}\n\n// 5) Retourner un item par article\nreturn results;\n"
      },
      "name": "Process All-in-One",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        448,
        0
      ],
      "id": "d3591764-0fc8-4276-8d03-c29f0da8b390"
    },
    {
      "parameters": {
        "url": "https://fr.euronews.com/rss?format=mrss&level=vertical&name=green",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        224,
        112
      ],
      "id": "d02ea805-a057-442a-be87-03158167a440",
      "name": "HTTP Request"
    }
  ],
  "pinData": {},
  "connections": {
    "Every 6 Hours": {
      "main": [
        [
          {
            "node": "Fetch Euronews Green RSS",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Euronews Green RSS": {
      "main": [
        [
          {
            "node": "Process All-in-One",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Process All-in-One",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "fd30f1b6-b989-4481-8ced-52de2ea1969f",
  "meta": {
    "instanceId": "21778c45bf778f4a9552ba8cd0e73b04b95326e2ac88b7dabce34e4e140644ee"
  },
  "id": "jQGgVEEdumI2iXxh",
  "tags": []
}